/*
 * ListadoInvestigador.java
 *
 * Created on 3 de marzo de 2007, 13:35
 */

package Vista;

import Modelo.Investigador;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.util.LinkedList;
import javax.swing.JOptionPane;
/**
 *
 * @author  PC
 */
public class ListadoInvestigador extends javax.swing.JFrame {

    /** Creates new form ListadoInvestigador */
    public ListadoInvestigador() {
        initTabla();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jTable1.setModel(getModel());
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Nuevo Investigador");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar Investigador");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Borrar Investigador");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cerrar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         if (jTable1.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Seleccione un usuario primero.", "No hay ningun usuario seleccionado", JOptionPane.ERROR_MESSAGE);
            return;
        }
         Investigador inv;
        try{
            inv = new Investigador((String)jTable1.getValueAt(jTable1.getSelectedRow(), 2)); //crea un investigador con el campo del dni como param
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Error de la Base de Datos.\nReporte el problema.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ModificarUsuario modificar = new ModificarUsuario(inv, this);
        modificar.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jTable1.getSelectedRow() == -1 ){
            JOptionPane.showMessageDialog(this, "Seleccione un usuario primero.", "No hay ningun usuario seleccionado", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object[] options = {"Si, borrarlo",
                    "Cancelar"};
        int n = JOptionPane.showOptionDialog(this, "Realmente desea borrar este usuario de la base de datos? ", "Precaución", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        if(n == 0){
            Investigador inv;
            try{
                inv = new Investigador((String)jTable1.getValueAt(jTable1.getSelectedRow(), 2)); //crea un investigador con el campo del dni como param
                inv.borrarInvestigador();
            }catch(SQLException e){
                JOptionPane.showMessageDialog(this, "Error de la Base de Datos. No se puede borrar\nReporte el problema.", "No se puede borrar el investigador", JOptionPane.ERROR_MESSAGE);
                return;
            }
            borrarFila();
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AltaUsuario au = new AltaUsuario(this);
        au.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed



     public DefaultTableModel getModel(){
        return this.dtm;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel dtm;

    public void initTabla(){
        LinkedList listaInv = null;
        try{
            listaInv = Investigador.getListaInvestigadores();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Error en la Base de datos al buscar los investigadores.\nReporte el error." , "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        }

        dtm = new DefaultTableModel();

        dtm.addColumn("Nombre");
        dtm.addColumn("Apellido");
        dtm.addColumn("Dni");
        dtm.addColumn("Telefono");
        dtm.addColumn("Email");
        dtm.addColumn("Staff");

        for(int i = 0; i < listaInv.size(); i++){
            Investigador inv = (Investigador) listaInv.get(i);
            dtm.addRow(getFila(inv));
        }
        //listaInv.clear();
    }
    private Object[] getFila(Investigador inv ){
        Object[] datos = new Object[7];
        datos[0] = inv.getNombre();
        datos[1] = inv.getApellido();
        datos[2] = "" + inv.getDni();
        datos[3] = inv.getTelefono();
        datos[4] = inv.getEmail();
        datos[5] = inv.esEncargado();
        return datos;
    }
    public void insertarFila(Investigador inv){
        this.dtm.addRow(getFila(inv));
    }
    public void actualizarFila(Investigador nuevo){
        this.dtm.setValueAt(nuevo.getNombre(), jTable1.getSelectedRow(), 0);
        this.dtm.setValueAt(nuevo.getApellido(), jTable1.getSelectedRow(), 1);
        this.dtm.setValueAt(String.valueOf(nuevo.getDni()), jTable1.getSelectedRow(), 2);
        this.dtm.setValueAt(nuevo.getTelefono(), jTable1.getSelectedRow(), 3);

        this.dtm.setValueAt(nuevo.getEmail(), jTable1.getSelectedRow(), 4);
        this.dtm.setValueAt(nuevo.esEncargado(), jTable1.getSelectedRow(), 5);

    }
    public boolean borrarFila(){
        if(jTable1.getSelectedRow() != -1){
            this.dtm.removeRow(jTable1.getSelectedRow());
            return true;
        }
        return false;
    }
}